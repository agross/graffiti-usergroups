<?xml version="1.0"?>
<project name="Graffiti-UserGroups"
		 default="all"
		 xmlns="http://nant.sf.net/release/0.86-beta1/nant.xsd">

	<!-- Tasks that run on every build.
	________________________________________________________________________________________________________________ -->
	<!-- Load default configuration. -->
	<if test="${file::exists('default.properties')}">
		<echo message="Loading default.properties" />
		<include buildfile="default.properties" />
	</if>

	<!-- Load developer-specific configuration. -->
	<if test="${file::exists('local.properties')}">
		<echo message="Loading local.properties" />
		<include buildfile="local.properties" />
	</if>

	<echo message="Build configuration:" />
	<script language="C#">
		<code>
			<![CDATA[
				public static void ScriptMain(Project project)
				{
					System.Collections.Generic.SortedDictionary<string, string> sortedByKey = new System.Collections.Generic.SortedDictionary<string, string>();
					foreach(DictionaryEntry de in project.Properties)
					{
						sortedByKey.Add(de.Key.ToString(), de.Value.ToString());
					}

					NAnt.Core.Tasks.EchoTask echo = new NAnt.Core.Tasks.EchoTask();
					echo.Project = project;
					foreach(System.Collections.Generic.KeyValuePair<string, string> kvp in sortedByKey)
					{
						if(kvp.Key.StartsWith("nant."))
						{
							continue;
						}

						echo.Message = String.Format("{0}: {1}", kvp.Key, kvp.Value);
						echo.Execute();
					}
				}
			]]>
		</code>
	</script>

	<target name="all"
			depends="build-app, build-theme, run-tests, build-setup"
			description="Compiles the application, runs all unit tests and creates deployment packages.">
	</target>

	<target name="get-build-number-from-file"
			description="Reads the version number from VersionInfo.cs.">
		<script language="C#">
			<code>
				<![CDATA[
				public static void ScriptMain(Project project)
				{
					string file = String.Empty;
					using (StreamReader sr = new StreamReader(Path.Combine(project.Properties["build.msbuild.solutiondir"], "VersionInfo.cs")))
					{
						file = sr.ReadToEnd();
					}

					project.Properties["build.number.fromfile"] = Regex.Match(file, "(?<=\\[assembly:\\s*AssemblyVersion(?:Attribute)?\\(\")\\d+\\.\\d+\\.\\d+\\.\\d+").Value;
				}
				]]>
			</code>
		</script>
	</target>

	<!-- Cleanup.
	________________________________________________________________________________________________________________ -->
	<target name="clean"
			description="Removes build artifacts.">
		<delete dir="${basedir.test.results}"
				failonerror="false" />
		<delete dir="${basedir.temp}"
				failonerror="false" />
		<delete dir="${basedir.deployment.artifacts}"
				failonerror="false" />
		<foreach item="Folder"
				 property="folder">
			<in>
				<items>
					<include name="${basedir.app}\**" />
					<include name="${basedir.test}\**" />
				</items>
			</in>
			<do>
				<delete dir="${folder}\bin"
						failonerror="false" />
				<delete dir="${folder}\obj"
						failonerror="false" />
			</do>
		</foreach>
	</target>

	<!-- Application.
	________________________________________________________________________________________________________________ -->
	<target name="init-build-app"
			depends="clean"
			description="Creates VersionInfo.cs from the value specified at the command line or leaves the file as-is.">
		<asminfo language="CSharp"
				 output="source\VersionInfo.cs"
				 if="${version::parse(build.number) != version::parse(build.number.fromfile)}">
			<imports>
				<import namespace="System" />
				<import namespace="System.Reflection" />
			</imports>
			<attributes>
				<attribute type="AssemblyFileVersionAttribute"
						   value="${build.number}" />
				<attribute type="AssemblyVersionAttribute"
						   value="${build.number}" />
			</attributes>
		</asminfo>
	</target>

	<fileset id="config-files">
		<include name="${basedir.app}\**\*.config.template" />
		<include name="${basedir.test}\**\*.config.template" />
	</fileset>

	<target name="create-config"
			description="Creates the configuration files for the application.">
		<foreach item="File"
				 property="configfile">
			<in>
				<items refid="config-files" />
			</in>
			<do>
				<copy file="${configfile}"
					  tofile="${path::change-extension(configfile, '')}"
					  overwrite="true"
					  inputencoding="utf-8"
					  outputencoding="utf-8">
					<filterchain>
						<replacetokens>
							<token key="database.connectionstring"
								   value="${string::replace(database.connectionstring, '\', '\\')}" />
							<token key="project.name"
								   value="${project::get-name()}" />
						</replacetokens>
					</filterchain>
				</copy>
			</do>
		</foreach>
	</target>

	<target name="build-app"
			depends="init-build-app"
			description="Compiles the application.">
		<msbuild project="${basedir.app}\DnugLeipzig.Extensions\DnugLeipzig.Extensions.csproj"
				 target="${build.msbuild.target}"
				 verbosity="${build.msbuild.verbosity}">
			<arg value="/p:Configuration=${build.msbuild.configuration}" />
			<arg value="/p:SolutionDir=${build.msbuild.solutiondir}" />
			<arg value="/p:NAntCall=true" />
			<arg value="/maxcpucount" />
		</msbuild>

		<msbuild project="${basedir.app}\DnugLeipzig.Plugins\DnugLeipzig.Plugins.csproj"
				 target="${build.msbuild.target}"
				 verbosity="${build.msbuild.verbosity}">
			<arg value="/p:Configuration=${build.msbuild.configuration}" />
			<arg value="/p:SolutionDir=${build.msbuild.solutiondir}" />
			<arg value="/p:NAntCall=true" />
			<arg value="/maxcpucount" />
		</msbuild>

		<msbuild project="${basedir.app}\DnugLeipzig.DemoSite\DnugLeipzig.DemoSite.csproj"
				 target="${build.msbuild.target}"
				 verbosity="${build.msbuild.verbosity}">
			<arg value="/p:Configuration=${build.msbuild.configuration}" />
			<arg value="/p:SolutionDir=${build.msbuild.solutiondir}" />
			<arg value="/p:NAntCall=true" />
			<arg value="/maxcpucount" />
		</msbuild>
	</target>

	<!-- Theme.
	________________________________________________________________________________________________________________ -->
	<target name="init-build-theme"
			depends="clean"
			description="Builds the theme.">
		<mkdir dir="${basedir.temp}\DnugLeipzig.Theme" />
	</target>

	<target name="build-theme"
			depends="build-app, init-build-theme"
			description="Builds the theme.">
		<!-- Copy content files. -->
		<copy todir="${basedir.temp}\DnugLeipzig.Theme">
			<fileset basedir="${basedir.app}\DnugLeipzig.Theme">
				<include name="**\*.css" />
				<include name="**\*.js" />
				<include name="**\*.ico" />
				<include name="**\*.png" />
				<include name="**\*.gif" />
				<include name="**\*.html" />
				<include name="**\*.as?x" />
			</fileset>
		</copy>

		<!-- Rename *.html to *.view. -->
		<foreach item="File"
				 property="filename">
			<in>
				<items basedir="${basedir.temp}\DnugLeipzig.Theme">
					<include name="**\*.html" />
				</items>
			</in>
			<do>
				<move file="${filename}"
					  tofile="${path::change-extension(filename, '.view')}" />
			</do>
		</foreach>
	</target>

	<!-- Tests.
	________________________________________________________________________________________________________________ -->
	<fileset id="test-projects">
		<patternset>
			<include name="${basedir.test}\**\*.Tests.csproj" />
		</patternset>
	</fileset>

	<target name="build-tests"
			depends="build-app"
			description="Compiles the applications' unit tests.">
		<foreach item="File"
				 property="testproject">
			<in>
				<items refid="test-projects" />
			</in>
			<do>
				<msbuild project="${testproject}"
						 target="${build.msbuild.target}"
						 verbosity="${build.msbuild.verbosity}">
					<arg value="/p:Configuration=${build.msbuild.configuration}" />
					<arg value="/p:SolutionDir=${build.msbuild.solutiondir}" />
					<arg value="/p:NAntCall=true" />
					<arg value="/maxcpucount" />
				</msbuild>
			</do>
		</foreach>
	</target>

	<target name="init-run-tests">
		<mkdir dir="${basedir.test.results}" />
	</target>

	<target name="run-tests"
			depends="build-tests, init-run-tests"
			description="Runs the applications' unit tests.">
		<foreach item="File"
				 property="testproject">
			<in>
				<items refid="test-projects" />
			</in>
			<do>
				<echo message="${path::get-directory-name(testproject)}\bin\${build.msbuild.configuration}"/>
				<mbunit report-types="${tools.mbunit.report.type}"
						report-filename-format="${path::get-file-name-without-extension(testproject)}"
						report-output-directory="${basedir.test.results}"
						verbose="true"
						workingdir="${path::get-directory-name(testproject)}\bin\${build.msbuild.configuration}">
					<assemblies>
						<include name="${path::get-directory-name(testproject)}\bin\${build.msbuild.configuration}\${path::get-file-name-without-extension(testproject)}.dll" />
					</assemblies>
				</mbunit>
			</do>
		</foreach>

		<if test="${property::exists('teamcity.build.checkoutDir')}">
			<tc-addstatistic key="MbUnitAsserts"
							 value="${mbunit.asserts}"/>
			<tc-addstatistic key="MbUnitFailedTests"
							 value="${mbunit.failures}"/>
			<tc-addstatistic key="MbUnitIgnoredTests"
							 value="${mbunit.ignored}"/>
			<tc-addstatistic key="MbUnitRunTests"
							 value="${mbunit.run}"/>
			<tc-addstatistic key="MbUnitSkippedTests"
							 value="${mbunit.skipped}"/>
			<tc-addstatistic key="MbUnitPassedTests"
							 value="${mbunit.successes}"/>
		</if>
	</target>

	<!-- Setup.
	________________________________________________________________________________________________________________ -->
	<target name="init-build-setup"
			depends="clean">
		<mkdir dir="${basedir.deployment.artifacts}" />
	</target>

	<target name="build-setup"
			depends="build-app, build-theme, run-tests, init-build-setup"
			description="Creates the applications' deployment package.">
		<zip zipfile="${basedir.deployment.artifacts}\${project::get-name()}-${build.number}.zip"
			 ziplevel="9"
			 duplicate="Preserve">
			<!-- Theme. -->
			<fileset basedir="${basedir.temp}\DnugLeipzig.Theme"
					 prefix="files\themes\${project::get-name()}">
				<include name="**\*" />
			</fileset>

			<!-- Container. -->
			<fileset basedir="${basedir.app}\DnugLeipzig.Container\bin\${build.msbuild.configuration}"
					 prefix="bin">
				<include name="Castle.*.dll" />
				<include name="DnugLeipzig.*" />
			</fileset>
			
			<!-- Extensions. -->
			<fileset basedir="${basedir.app}\DnugLeipzig.Extensions\bin\${build.msbuild.configuration}"
					 prefix="bin">
				<include name="DnugLeipzig.*" />
			</fileset>

			<!-- Plugins. -->
			<fileset basedir="${basedir.app}\DnugLeipzig.Plugins\bin\${build.msbuild.configuration}"
					 prefix="bin">
				<include name="DnugLeipzig.*" />
			</fileset>

			<!-- Demo site. -->
			<fileset basedir="${basedir.app}\DnugLeipzig.DemoSite\bin\${build.msbuild.configuration}"
					 prefix="bin">
				<include name="DnugLeipzig.*" />
			</fileset>
		</zip>
	</target>

	<!-- Deployment.
	________________________________________________________________________________________________________________ -->
	<target name="init-deploy">
		<fail message="Cannot deploy, property 'basedir.deployment.targetpath' is empty or does not exist. Enter it in your local.properties file (see local.properties.template for more information)."
			  if="${not property::exists('basedir.deployment.targetpath') or string::get-length(property::get-value('basedir.deployment.targetpath')) == 0}" />

		<mkdir dir="${basedir.deployment.targetpath}" />
	</target>

	<target name="deploy"
			depends="build-setup, init-deploy"
			description="Deploys the application.">
		<delete dir="${basedir.deployment.targetpath}\files\themes\${project::get-name()}"
				failonerror="false" />
		<unzip zipfile="${basedir.deployment.artifacts}\${project::get-name()}-${build.number}.zip"
			   todir="${basedir.deployment.targetpath}"/>
	</target>

	<target name="upload-setup"
			depends="build-setup"
			description="Upload the deployment package to Google Code.">
		<fail message="Cannot upload deployment package to Google Code, property 'googlecode.username' and/or property 'googlecode.password' is empty or does not exist."
			  if="${not property::exists('googlecode.username') or string::get-length(property::get-value('googlecode.username')) == 0 or not property::exists('googlecode.password') or string::get-length(property::get-value('googlecode.password')) == 0}" />

		<gcupload username="${googlecode.username}"
				  password="${googlecode.password}"
				  filename="${basedir.deployment.artifacts}\${project::get-name()}-${build.number}.zip"
				  targetfilename="${project::get-name()}-${build.number}.zip"
				  summary="${project::get-name()}-${build.number}"
				  projectname="${project::get-name()}"/>
	</target>
</project>